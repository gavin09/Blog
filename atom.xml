<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coder blog]]></title>
  <link href="http://gavin09.github.com/Blog/atom.xml" rel="self"/>
  <link href="http://gavin09.github.com/Blog/"/>
  <updated>2013-02-22T10:52:29+08:00</updated>
  <id>http://gavin09.github.com/Blog/</id>
  <author>
    <name><![CDATA[Gavin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GNU global trace code tool]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2013/02/21/gnu-global-trace-code-tool/"/>
    <updated>2013-02-21T23:56:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2013/02/21/gnu-global-trace-code-tool</id>
    <content type="html"><![CDATA[<p>Before using this tool, I use vim and grep for tracing code.</p>

<p>I found this tool is so wonderful and easy to use.</p>

<p>official website <a href="http://www.gnu.org/software/global/">GNU Global</a> for downloading source code.</p>

<h2>Installation</h2>

<p>   ./configure  <br/>
   make      <br/>
   make install</p>

<h2>usage</h2>

<p>   cd <root src code>
   htags -G -F -f</p>

<p>Then, open HTML/index.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reverse-ssh]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2013/02/20/reverse-ssh/"/>
    <updated>2013-02-20T00:41:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2013/02/20/reverse-ssh</id>
    <content type="html"><![CDATA[<p>http://portable.easylife.tw/2043</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[multiple terminal session record]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2013/02/19/script-record/"/>
    <updated>2013-02-19T22:39:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2013/02/19/script-record</id>
    <content type="html"><![CDATA[<p>Sometimes, I want to find some commands I typed before.
Or remind what I did last time in terminal.</p>

<p>So, I start to survey this issue.
Both of the discussions are interesting and useful <a href="http://hints.macworld.com/article.php?story=20120507163311559">macworld.com</a> <a href="http://linux.byexamples.com/archives/279/record-the-terminal-session-and-replay-later/">linux.byexamples.com</a>.</p>

<p>I borrow the ideas from both of the website. And write a script</p>

<p>share here https://gist.github.com/
todo: write script</p>

<p>Reference:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPEC CPU2006 note]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2013/02/19/speccpu2006/"/>
    <updated>2013-02-19T18:06:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2013/02/19/speccpu2006</id>
    <content type="html"><![CDATA[<p>Recently, I&#8217;m trying to install SPEC CPU2006 for some experiment.</p>

<p>I found setting up a SPEC CPU2006 environment is not easy to me.</p>

<p>However, there is little information for my questions.</p>

<p>So, I log some steps and some problems I encounter here.</p>

<p>pre:</p>

<p>  $sudo apt-get install build-essential libdeal.ii-dev</p>

<p>$ sudo mount <iso file> /mnt
$ cp -r SPECCPU2006 ~
$ chmod -R 755 result config benchspec</p>

<p>./install.sh
. ./shrc</p>

<p>some argument:</p>

<p>about config file:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Mountain Lion Homebrew Install]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/12/22/mac-homebrew-install/"/>
    <updated>2012-12-22T19:33:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/12/22/mac-homebrew-install</id>
    <content type="html"><![CDATA[<p>Install Homebrew</p>

<pre><code>ruby &lt;(curl -fsSkL raw.github.com/mxcl/homebrew/go)
</code></pre>

<p>Check any issue when installing brew</p>

<pre><code>brew doctor
</code></pre>

<p>Install application</p>

<pre><code>brew install app_name
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Static Function ? ]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/11/30/why-static-function/"/>
    <updated>2012-11-30T22:56:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/11/30/why-static-function</id>
    <content type="html"><![CDATA[<p>最近在trace code 的時候會發現有的人會用static function.</p>

<p>冒出了一個疑問，為何要加上一個static ? 有什麼好處? 用在什麼時候適合?</p>

<p>所以做了一系列的 google ，在這邊做了一些整理</p>

<ol>
<li>unvisible <a href="http://stackoverflow.com/questions/5319361/static-function-in-c">StackOverflow</a>
做出一個對外使用的function，內部做translate unit
事實上，static function 的scope 是local 的。</li>
<li>save memory in class method <a href="http://stackoverflow.com/questions/4779950/is-static-method-faster-than-non-static">StackOverflow</a>
在這個討論串特別強調的是有無必要使用object
若是沒有的話就用static，可以節省memory</li>
</ol>


<p>Reference</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lvalue rvalue]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/11/28/lvalue-and-rvalue/"/>
    <updated>2012-11-28T16:49:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/11/28/lvalue-and-rvalue</id>
    <content type="html"><![CDATA[<p>今天面試的時候被問到什麼是lvalue 和 rvalue</p>

<p>當下完全不知道阿!!</p>

<hr />

<p>lvalue 是程式等號的左邊
rvalue 就是程式等號的右邊</p>

<p>右邊的永遠是值，左邊的永遠是變數。右邊的值要給左邊
也就是說右邊的是讀取位址<em>裡面的值</em>，讀取出來後塞入左邊的位址裡面</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tc rate limit]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/11/18/tc-rate-limit/"/>
    <updated>2012-11-18T15:10:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/11/18/tc-rate-limit</id>
    <content type="html"><![CDATA[<p>tc 可以限制網路卡的速度</p>

<p>tc qdisk add dev eth0 root tbf 400kbit latency 50ms burst 4096</p>

<p>限制速度400 kbit, latency 50ms, burst 4096</p>

<p>若不要使用則是</p>

<p>tc qdisk del dev eth0 root tbf 400kbit latency 50ms burst 4096</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clear Linux buffer cache]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/11/18/clean-linux-buffer-cache/"/>
    <updated>2012-11-18T14:24:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/11/18/clean-linux-buffer-cache</id>
    <content type="html"><![CDATA[<p>在測試網卡throughput的時候使用了tcpreplay</p>

<p>發現在Xen DomU 做測試時</p>

<p>第二次以後的結果都快的驚人</p>

<p>仔細思考之後認為是buffer裡面已經有傳送的封包</p>

<p>（網路線拔掉，使用udp 傳輸）</p>

<p>後來在 [1] 的地方找到了如何清理buffer</p>

<p>在此做紀錄</p>

<p>ps. 使用了方法1之後，確實throughput 就恢復正常了</p>

<ol>
<li><p>Empty the linux buffer cache</p>

<p> sync &amp;&amp; echo 3 > /proc/sys/vm/drop_caches</p></li>
<li><p>Release memory used by the Linux kernel on caches</p>

<p> free &amp;&amp; sync &amp;&amp; echo 3 > /proc/sys/vm/drop_caches &amp;&amp; free</p></li>
<li><p>clean up memory of unnecessary things (Kernerl 2.6.16 or newer)</p></li>
</ol>


<p>run sync first to flush useful things out to disk!!!<br/>
To free pagecache:<br/>
echo 1 > /proc/sys/vm/drop_caches<br/>
To free dentries and inodes:<br/>
echo 2 > /proc/sys/vm/drop_caches<br/>
To free pagecache, dentries and inodes:<br/>
echo 3 > /proc/sys/vm/drop_caches</p>

<pre><code>sync &amp;&amp; echo 1 &gt; /proc/sys/vm/drop_caches
</code></pre>

<ol>
<li><p>sync; echo 3 | sudo tee /proc/sys/vm/drop_caches</p>

<p> clean up memory on linux</p></li>
</ol>


<p>Reference<br/>
[1] <a href="http://www.commandlinefu.com/commands/view/1026/empty-the-linux-buffer-cache">http://www.commandlinefu.com/commands/view/1026/empty-the-linux-buffer-cache</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kernel-space-and-user-space]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/11/05/kernel-space-and-user-space/"/>
    <updated>2012-11-05T15:23:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/11/05/kernel-space-and-user-space</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kernel space and user space]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/11/05/kernel-space-and-user-space/"/>
    <updated>2012-11-05T15:23:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/11/05/kernel-space-and-user-space</id>
    <content type="html"><![CDATA[<p>最近在面試的時候被問到這個如何用程式作轉換的流程。
感覺當下不是非常的清楚。所以又回來看了一下。</p>

<p>User   space 位於 0  ~ 3G
Kernel space 位於 3G ~ 4G</p>

<p>通常切換到kernel space 都是呼叫system call, ex : fork, open, read, write
切換時會作80號中斷。</p>

<p>Reference<br/>
[1] <a href="http://www.study-area.org/cyril/opentools/opentools/x952.html">http://www.study-area.org/cyril/opentools/opentools/x952.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim內建技巧]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/11/05/vim-skill/"/>
    <updated>2012-11-05T14:59:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/11/05/vim-skill</id>
    <content type="html"><![CDATA[<p>記錄一些使用vi的技巧
無論是在coding或者是在trace code的時候都會有很多的幫助</p>

<ul>
<li>在想要搜尋的變數上面壓* ，就會往有使用到該變數的地方跳。</li>
<li>% 可以從左括號跳到右括號。反之亦然。</li>
<li>dd : delete 該行</li>
<li>也可以安裝ctag，顯示function list</li>
</ul>


<hr />

<p>Reference<br/>
[1] <a href="http://zwai.pixnet.net/blog/post/26308977-vim-%E5%B0%8F%E6%8A%80%E5%B7%A7-(3)%EF%BC%9A-trace-code-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A-*-%E8%88%87-">http://zwai.pixnet.net/blog/post/26308977-vim-%E5%B0%8F%E6%8A%80%E5%B7%A7-(3)%EF%BC%9A-trace-code-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A-*-%E8%88%87-</a><br/>
[2] <a href="http://flyingwie.blogspot.tw/2011/03/trace-code.html">http://flyingwie.blogspot.tw/2011/03/trace-code.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dropbox-auto-run]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/10/22/dropbox-auto-run/"/>
    <updated>2012-10-22T00:16:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/10/22/dropbox-auto-run</id>
    <content type="html"><![CDATA[<pre><code>mkdir $HOME/.config/autostart
</code></pre>

<p>vi Dropbox.desktop</p>

<pre><code>[Desktop Entry]
Encoding=UTF-8
Name=Dropbox
Comment=RunDropbox
Icon=/usr/share/icons/elementary/panel/22/dropboxstatus-logo.svg
Exec=bash /home/*user*/.dropbox-dist/dropboxd
Terminal=false
Type=Application
</code></pre>

<p>Note:</p>

<pre><code>Icon need to be checked  
</code></pre>

<h3>Reference</h3>

<p>[1] <a href="http://ubuntuforums.org/showpost.php?p=11108807&amp;postcount=8">http://ubuntuforums.org/showpost.php?p=11108807&amp;postcount=8</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using less with colors]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/10/08/less-with-color/"/>
    <updated>2012-10-08T17:57:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/10/08/less-with-color</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using less with colors]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/10/08/less-with-color/"/>
    <updated>2012-10-08T17:57:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/10/08/less-with-color</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terminator介紹]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/10/04/intro-terminator/"/>
    <updated>2012-10-04T20:37:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/10/04/intro-terminator</id>
    <content type="html"><![CDATA[<p><img src="http://gavin09.github.com/Blog/images/2012-10-04-intro-terminator.png" title="Terminator" ></p>

<p>Terminator 可以切割出多個terminal，相當方便。對於要對照兩個視窗的文件是特別的好用。</p>

<h1>安裝</h1>

<pre><code>sudo apt-get install terminator
</code></pre>

<h1>常用快捷鍵</h1>

<p>Ctrl + Shift + O : 開啟水平的terminal</p>

<p>Ctrl + Shift + E : 開啟垂直的terminal</p>

<p>Ctrl + Shift + + : 字體變大</p>

<p>Ctrl +  -        : 字體變小</p>

<p>Ctrl + Shift + w : 關閉terminal</p>

<p>Ctrl + Shift + t : 開啟一個新的分頁(tab)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[putty-type-chinese]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/10/02/putty-type-chinese/"/>
    <updated>2012-10-02T15:31:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/10/02/putty-type-chinese</id>
    <content type="html"><![CDATA[<ol>
<li><p>Open Putty</p></li>
<li><p>Windows -> Translation -> character set 改為 UTF-8</p></li>
</ol>


<p>-Windows
|
&#8211;Translation
|
  character set 改為 UTF-8</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git : error: Untracked working tree file ‘XXXX’ would be overwritten by merge]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/10/02/git-version-control-clean/"/>
    <updated>2012-10-02T10:58:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/10/02/git-version-control-clean</id>
    <content type="html"><![CDATA[<h1>Warning message</h1>

<pre><code>error: Untracked working tree file ‘XXXX’ would be overwritten by merge.
</code></pre>

<p>原因來自於 git rm file 之後，切換branch 的緣故</p>

<h1>solution</h1>

<pre><code>git fetch --all
git reset --hard origin/master
</code></pre>

<h1>reference</h1>

<p><a href="http://blog.wu-boy.com/2011/05/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-version-control-git-clean-%E4%BD%BF%E7%94%A8%E6%99%82%E6%A9%9F/">http://blog.wu-boy.com/2011/05/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-version-control-git-clean-%E4%BD%BF%E7%94%A8%E6%99%82%E6%A9%9F/</a>
<a href="http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull">http://stackoverflow.com/questions/1125968/force-git-to-overwrite-local-files-on-pull</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[child-process-input]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/09/25/child-process-input/"/>
    <updated>2012-09-25T14:51:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/09/25/child-process-input</id>
    <content type="html"><![CDATA[<p>今天在測試child process 在使用鍵盤輸入是否會正常的時候，發現child process 跳過了scanf 的階段直接print 出結果。</p>

<pre><code>#include&lt;stdio.h&gt;

#define num_child 2
int main(){

        int i;
        int cpid[num_child];
        int input;
        for(i=0; i &lt; num_child;i++){
                cpid[i] = fork();
                if(cpid[i] == 0){
                        //i=10;
                        scanf("%d",&amp;input);
                        printf("im child:%d : %d\n",getpid(),input);

                        break;
                }
        }


        return 0;
}
</code></pre>

<p>覺得這個結果很奇怪，如果stdin跑掉的話，應該也看不到stdout 的結果，後來發現，因為parent process 因為已經先離開了，所以child process 不知道該把stdin 導至何方，而因為程式執行的很快，所以一開始的stdout 才可以導出來，底下才是正確的版本。</p>

<pre><code>#include&lt;stdio.h&gt;

#define num_child 2
int main(){

        int i;
        int cpid[num_child];
        int input;
        for(i=0; i &lt; num_child;i++){
                cpid[i] = fork();
                if(cpid[i] == 0){
                        //i=10;
                        scanf("%d",&amp;input);
                        printf("im child:%d : %d\n",getpid(),input);

                        break;
                }
                else{
                        wait(NULL);

                }
        }


        return 0;
}
</code></pre>

<p>2012-9-8 update
thread 也有同樣的情形，要用pthread_join 等 thread return value (等thread結束)
pthread_join(t1, NULL);</p>

<p>reference<br/>
[1] <a href="http://stackoverflow.com/questions/1510922/waiting-for-all-child-processes-before-parent-resumes-execution-unix">http://stackoverflow.com/questions/1510922/waiting-for-all-child-processes-before-parent-resumes-execution-unix</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Python Code Complete]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/09/24/vim-python-code-complete/"/>
    <updated>2012-09-24T00:00:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/09/24/vim-python-code-complete</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &#8220;vim python-code-complete&#8221;
date: 2012-09-24 16:45
comments: true</p>

<h1>categories: [vim,python]</h1>

<h2>Download pydiction</h2>

<pre><code>    git clone https://github.com/vim-scripts/Pydiction.git
</code></pre>

<h2>Install</h2>

<pre><code>    mkdir $HOME/.vim/after/ftplugin/
</code></pre>

<p>資料夾名稱一定要使用上述名稱。系統預設，可以下指令</p>

<pre><code>    :set runtimepath
</code></pre>

<p>查看系統預設路徑</p>

<h2>Vim Setting</h2>

<pre><code>    vim $HOME/.vimrc

            filetype plugin on 
            let g:pydiction_location = '~/.vim/after/ftplugin/complete-dict'
</code></pre>

<h2>reference</h2>

<p><a href="https://sites.google.com/site/fajoydelinuxbiji/pkg_all/pydiction-an-zhuang-zaivim-depython-wai-gua-ke-yi-antab-xian-shipython-han-shu">https://sites.google.com/site/fajoydelinuxbiji/pkg_all/pydiction-an-zhuang-zaivim-depython-wai-gua-ke-yi-antab-xian-shipython-han-shu</a><br/>
<a href="http://blog.copyninja.info/2010/02/python-auto-complete-for-vim.html">http://blog.copyninja.info/2010/02/python-auto-complete-for-vim.html</a></p>
]]></content>
  </entry>
  
</feed>
