<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | My Octopress Blog]]></title>
  <link href="http://gavin09.github.com/Blog/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://gavin09.github.com/Blog/"/>
  <updated>2012-10-04T21:21:09+08:00</updated>
  <id>http://gavin09.github.com/Blog/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[child-process-input]]></title>
    <link href="http://gavin09.github.com/Blog/blog/2012/09/25/child-process-input/"/>
    <updated>2012-09-25T14:51:00+08:00</updated>
    <id>http://gavin09.github.com/Blog/blog/2012/09/25/child-process-input</id>
    <content type="html"><![CDATA[<p>今天在測試child process 在使用鍵盤輸入是否會正常的時候，發現child process 跳過了scanf 的階段直接print 出結果。</p>

<pre><code>#include&lt;stdio.h&gt;

#define num_child 2
int main(){

        int i;
        int cpid[num_child];
        int input;
        for(i=0; i &lt; num_child;i++){
                cpid[i] = fork();
                if(cpid[i] == 0){
                        //i=10;
                        scanf("%d",&amp;input);
                        printf("im child:%d : %d\n",getpid(),input);

                        break;
                }
        }


        return 0;
}
</code></pre>

<p>覺得這個結果很奇怪，如果stdin跑掉的話，應該也看不到stdout 的結果，後來發現，因為parent process 因為已經先離開了，所以child process 不知道該把stdin 導至何方，而因為程式執行的很快，所以一開始的stdout 才可以導出來，底下才是正確的版本。</p>

<pre><code>#include&lt;stdio.h&gt;

#define num_child 2
int main(){

        int i;
        int cpid[num_child];
        int input;
        for(i=0; i &lt; num_child;i++){
                cpid[i] = fork();
                if(cpid[i] == 0){
                        //i=10;
                        scanf("%d",&amp;input);
                        printf("im child:%d : %d\n",getpid(),input);

                        break;
                }
                else{
                        wait(NULL);

                }
        }


        return 0;
}
</code></pre>

<p>2012-9-8 update
thread 也有同樣的情形，要用pthread_join 等 thread return value (等thread結束)
pthread_join(t1, NULL);</p>

<p>reference<br/>
[1] <a href="http://stackoverflow.com/questions/1510922/waiting-for-all-child-processes-before-parent-resumes-execution-unix">http://stackoverflow.com/questions/1510922/waiting-for-all-child-processes-before-parent-resumes-execution-unix</a></p>
]]></content>
  </entry>
  
</feed>
