<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Fronter]]></title>
  <link href="http://gavin09.github.io/Blog/feed" rel="self"/>
  <link href="http://gavin09.github.io/Blog/"/>
  <updated>2013-07-04T15:08:29+08:00</updated>
  <id>http://gavin09.github.io/Blog/</id>
  <author>
    <name><![CDATA[Gavin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTTP Status]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/06/04/http-status/"/>
    <updated>2013-06-04T00:42:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/06/04/http-status</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>上網的時候如果網頁找不到時都會顯示404，而404代表的就是HTTP的狀態。
在這邊列出HTTP/1.1 常見的狀態</p>

<h1>Status</h1>

<p>1xx: informational<br/>
2xx: successful</p>

<ul>
<li>200: OK</li>
<li>202: Accepted</li>
<li>204: No content</li>
</ul>


<p>4xx: client error</p>

<ul>
<li>403: forbidden</li>
<li>404: Not found</li>
<li>406: Not acceptable</li>
<li>408: request timeout</li>
</ul>


<p>5xx: server error</p>

<ul>
<li>500: internal server error</li>
<li>501: not implemented</li>
<li>503: service unavailable</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django runserver]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/06/02/django-runserver/"/>
    <updated>2013-06-02T00:56:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/06/02/django-runserver</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>在django的框架裡面，如果我們要測試我們寫的web就執行</p>

<pre><code>python manage.py runserver
</code></pre>

<p>通程預設的port會是8000，那麼就只要打開自己的瀏覽器輸入http://localhost:8000
就可以看到自己的網站。</p>

<p>但是如果是租用VPS (virtual private server)的主機的話，因為是remote server。
所以localhost:8000是沒有東西的。若又只能使用界面，就不能遠端桌面
（遠端相對吃掉很多頻寬阿&#8230;.</p>

<h1>Solution</h1>

<pre><code>ssh -L 8888:127.0.0.1:8000 &lt;user&gt;@&lt;remoteip&gt;
</code></pre>

<p>這樣就可以在自己的瀏覽器裡面打http://localhost:8888 看到畫面了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Recommended Package]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/06/01/python-package/"/>
    <updated>2013-06-01T21:35:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/06/01/python-package</id>
    <content type="html"><![CDATA[<h1>yolk</h1>

<p>yolk 可以列出所有已安裝的python package。</p>

<pre><code>sudo easy_install yolk
</code></pre>

<p>常用指令</p>

<pre><code>yolk -l  
</code></pre>

<p>列出package，並且列出其狀態</p>

<pre><code>yolk -a  
</code></pre>

<p>列出active的package</p>

<pre><code>yolk -U  
</code></pre>

<p>列出可以升級的package</p>

<h1>virtualenv</h1>

<h2>Install</h2>

<pre><code>sudo pip install virtualenv  
</code></pre>

<h2>usage</h2>

<pre><code>virtualenv &lt;dirname&gt;  
</code></pre>

<p>開啟資料夾，並將執行環境記錄在資料夾內</p>

<pre><code>. &lt;dirname&gt;/bin/activate
</code></pre>

<p>開啟執行環境</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python-ubuntu-install]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/06/01/python-ubuntu-install/"/>
    <updated>2013-06-01T21:16:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/06/01/python-ubuntu-install</id>
    <content type="html"><![CDATA[<h1>Install Easyinstall</h1>

<pre><code>sudo apt-get install build-essential python-setuptools python-dev  
</code></pre>

<h1>Install pip</h1>

<pre><code>sudo easy_install pip
</code></pre>

<h1>Install python package</h1>

<pre><code>sudo easy_install &lt;package&gt;  
</code></pre>

<p>or</p>

<pre><code>sudo pip &lt;package&gt;
</code></pre>

<h1>Reference:</h1>

<p>[1] http://www.openfoundry.org/tw/tech-column/8536-introduction-of-python-extension-management-tools</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[json-using-javascript]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/05/28/json-using-javascript/"/>
    <updated>2013-05-28T23:49:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/05/28/json-using-javascript</id>
    <content type="html"><![CDATA[<p>最近正在使用JSON, 記錄一些用法</p>

<div><script src='https://gist.github.com/5664057.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>checkExist(phonebook, &#8220;alice&#8221;)                                                <br/>
-> exist                                                                      <br/>
checkExist(phonebook, &#8220;Hello&#8221;)                                                <br/>
-> not exist</p>

<p>phonebook.alice                                                               <br/>
-> ({number:-333, id:1})</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mercurial 常用指令]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/04/30/mercurial-command/"/>
    <updated>2013-04-30T16:09:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/04/30/mercurial-command</id>
    <content type="html"><![CDATA[<h2>hg用途</h2>

<h2>指令</h2>

<pre><code>hg clone &lt;repo&gt;
</code></pre>

<p>將repo上的專案複製到local端</p>

<pre><code>hg status
</code></pre>

<p>查看有repo裡面的檔案更動情形</p>

<pre><code>hg add &lt;filename&gt;
hg commit -m 'single line message'
</code></pre>

<p>將更動的檔案加入，並用一行訊息記錄成一個commit</p>

<pre><code>hg pull  
hg update  
</code></pre>

<p>hg pull 從remote repository下載到本地端的repo，但是此時尚未update 本地端的檔案<br/>
hg update 才會實際更新到本地端檔案</p>

<pre><code>hg update -C   
</code></pre>

<p>放棄local端尚未commit的更動</p>

<pre><code>hg push
</code></pre>

<p>push則是將自己做的更新上傳到網路上的repo</p>

<pre><code>hg diff -r rev1 -r rev2
hg diff -c rev
</code></pre>

<p>-c 可以看這一次rev所做的改變<br/>
-r 則是看兩個rev之間，所做的改變</p>

<pre><code>hg log
</code></pre>

<p>查看所有更動記錄</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mercurial Queues Extension]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/04/18/mercurial-queues-extension/"/>
    <updated>2013-04-18T15:27:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/04/18/mercurial-queues-extension</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>mq 在管理多個檔案的patch時相當方便</p>

<h2>Enable mq extentions</h2>

<p>在 .hg/hgrc 當中新增</p>

<pre><code>[extensions]
mq =
</code></pre>

<h2>Command</h2>

<pre><code>hg qnew &lt;patch name&gt;
</code></pre>

<p>開啟patch</p>

<pre><code>hg qrefresh
hg qrefresh -m 'one line message'
hg qrefresh -e # multi-line message
hg qrefresh -I &lt;filename1&gt; -I &lt;filename2&gt; #只把filename1 filename2 的改變加入patch
</code></pre>

<p>所有的的改變都會加入patch</p>

<pre><code>hg qqueue [option] [queue]

-l --list   list all available queues
   --active print name of active queue
-c --create create new queue
   --rename rename active queue
   --delete delete reference to queue
   --purge  delete queue, and remove patch dir
</code></pre>

<p>對queue的管理</p>

<pre><code>hg qseries  
hg qseries -v -s  
</code></pre>

<p>列出所有在queue的patch</p>

<pre><code>hg qapplied 
</code></pre>

<p>列出所有applied的patch</p>

<pre><code>hg qpop
</code></pre>

<p>移除the top patch</p>

<pre><code>hg qpush
</code></pre>

<p>加入the top patch</p>

<pre><code>hg qimport &lt;filename&gt;  
</code></pre>

<p>匯入patch到queue當中（記得要建立好queue)</p>

<pre><code>hg export qtip &gt; /Export/FILE/Location/&lt;filename.patch&gt;  
</code></pre>

<p>匯出patch</p>

<p>Reference<br/>
1. <a href="http://stevelosh.com/blog/2010/08/a-git-users-guide-to-mercurial-queues/#versioned-patch-queues">http://stevelosh.com/blog/2010/08/a-git-users-guide-to-mercurial-queues/#versioned-patch-queues</a><br/>
2. <a href="https://developer.mozilla.org/en-US/docs/Mercurial_Queues">https://developer.mozilla.org/en-US/docs/Mercurial_Queues</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改octopress table]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/03/31/octopress-table/"/>
    <updated>2013-03-31T00:41:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/03/31/octopress-table</id>
    <content type="html"><![CDATA[<p>因為官方的table 支援的不好，所以上網搜尋了一下。</p>

<p>網路上很多人都是reference這一篇的方法<a href="http://programus.github.com/blog/2012/03/07/add-table-data-css-for-octopress/">1</a></p>

<p>不過因為我懶得在每一篇還要加上styles: [data-table]</p>

<p>所以我直接改在sass/custom/_styles.css</p>

<p>Reference:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wake Locks]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/03/29/wakelocks/"/>
    <updated>2013-03-29T14:11:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/03/29/wakelocks</id>
    <content type="html"><![CDATA[<p>Android 會要求 application 和 services 需要CPU時要用&#8221;wake locks&#8221;的方式，透過Android frameworks 還有 native Linux Libraries來完成。</p>

<p>Android 有分類一些wake locks</p>

<table>
<thead>
<tr>
<th align="left">Flag                          </th>
<th align="center">  CPU       </th>
<th align="center"> Screen </th>
<th align="center"> Keyboard</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Partial  wake lock            </td>
<td align="center">  ON        </td>
<td align="center"> OFF    </td>
<td align="center"> OFF     </td>
</tr>
<tr>
<td align="left">Screen Dim wake lock          </td>
<td align="center">  ON        </td>
<td align="center"> OFF    </td>
<td align="center"> OFF     </td>
</tr>
<tr>
<td align="left">Screen Brigh wake lock        </td>
<td align="center">  ON        </td>
<td align="center"> OFF    </td>
<td align="center"> OFF      </td>
</tr>
<tr>
<td align="left">Full Wake lock                </td>
<td align="center">  ON        </td>
<td align="center"> Bright </td>
<td align="center"> Bright</td>
</tr>
</tbody>
</table>


<p>Reference:<br/>
1. http://loda.hala01.com/2011/01/android%E7%AD%86%E8%A8%98/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android And FFOS Debug function]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/03/29/android-and-ffos-debug/"/>
    <updated>2013-03-29T11:22:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/03/29/android-and-ffos-debug</id>
    <content type="html"><![CDATA[<p>   adb logcat</p>

<p>若要顯示log的話</p>

<h3>JS</h3>

<p>dump(Message)</p>

<h3>CPP</h3>

<p>LOGE - Error<br/>
LOGW - Warning<br/>
LOGD - Debug<br/>
LOGI - info</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git patch]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/03/29/git-patch/"/>
    <updated>2013-03-29T10:49:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/03/29/git-patch</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/5268510.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>   git apply <patch name> &#8211;reject
   git status
   git am <patch name> &#8211;resolved</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using latex with command line]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/02/23/latex-command/"/>
    <updated>2013-02-23T22:05:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/02/23/latex-command</id>
    <content type="html"><![CDATA[<h2>Installation</h2>

<p>   $ sudo apt-get install texlive-full</p>

<h2>command</h2>

<p>   $ latex name.tex<br/>
   $ bibtex name (generates name.bbl)<br/>
   $ latex name.tex<br/>
   $ pslatex name.tex<br/>
   $ dvipdf name.dvi</p>

<p>Reference:<br/>
[1] <a href="http://judsonsnotes.com/notes/index.php?option=com_content&amp;view=article&amp;id=322:linux-commands-for-latex&amp;catid=60:latex&amp;Itemid=84">http://judsonsnotes.com/notes/index.php?option=com_content&amp;view=article&amp;id=322:linux-commands-for-latex&amp;catid=60:latex&amp;Itemid=84</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using latex with command line]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/02/23/latex-command/"/>
    <updated>2013-02-23T22:05:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/02/23/latex-command</id>
    <content type="html"><![CDATA[<h2>Installation</h2>

<p>   $ sudo apt-get install texlive-full</p>

<h2>command</h2>

<p>   latex name.tex<br/>
   bibtex name (generates name.bbl)<br/>
   latex name.tex<br/>
   pslatex name.tex<br/>
   dvipdf name.dvi</p>

<p>Reference:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hide Ubuntu Unity]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/02/23/hide-unity/"/>
    <updated>2013-02-23T20:37:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/02/23/hide-unity</id>
    <content type="html"><![CDATA[<p>Some note for hide Ubuntu Unity.</p>

<h2>Install</h2>

<pre><code>sudo apt-get install compizconfig-settings-manager
</code></pre>

<h2>command</h2>

<pre><code>ccsm
</code></pre>

<p>enter &#8220;Ubuntu Unity plugin&#8221;
Hide Launcher: Never -> AutoHide</p>

<p>Reference:<br/>
[1] <a href="http://shuffleos.com/5151/hide-unity-launcher-panel-permanently-ubuntu-1110/">http://shuffleos.com/5151/hide-unity-launcher-panel-permanently-ubuntu-1110/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hide Ubuntu Unity]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/02/23/hide-unity/"/>
    <updated>2013-02-23T20:37:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/02/23/hide-unity</id>
    <content type="html"><![CDATA[<p>Some note for hide Ubuntu Unity.</p>

<h2>Install</h2>

<pre><code>sudo apt-get install compizconfig-settings-manager
</code></pre>

<h2>command</h2>

<pre><code>$ccsm
</code></pre>

<p>enter &#8220;Ubuntu Unity plugin&#8221;
Hide Launcher: Never -> AutoHide</p>

<p>Reference:
[1] <a href="http://shuffleos.com/5151/hide-unity-launcher-panel-permanently-ubuntu-1110/">http://shuffleos.com/5151/hide-unity-launcher-panel-permanently-ubuntu-1110/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GNU global trace code tool]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2013/02/21/gnu-global-trace-code-tool/"/>
    <updated>2013-02-21T23:56:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2013/02/21/gnu-global-trace-code-tool</id>
    <content type="html"><![CDATA[<p>Before using this tool, I use vim and grep for tracing code.</p>

<p>I found this tool is so wonderful and easy to use.</p>

<p>official website <a href="http://www.gnu.org/software/global/">GNU Global</a> for downloading source code.</p>

<h2>Installation</h2>

<p>   ./configure  <br/>
   make      <br/>
   make install</p>

<h2>usage</h2>

<p>   cd &lt;root src code > <br/>
   htags -G -F -f</p>

<p>Then, open HTML/index.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Mountain Lion Homebrew Install]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2012/12/22/mac-homebrew-install/"/>
    <updated>2012-12-22T19:33:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2012/12/22/mac-homebrew-install</id>
    <content type="html"><![CDATA[<p>Install Homebrew</p>

<pre><code>ruby &lt;(curl -fsSkL raw.github.com/mxcl/homebrew/go)
</code></pre>

<p>Check any issue when installing brew</p>

<pre><code>brew doctor
</code></pre>

<p>Install application</p>

<pre><code>brew install app_name
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Static Function ? ]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2012/11/30/why-static-function/"/>
    <updated>2012-11-30T22:56:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2012/11/30/why-static-function</id>
    <content type="html"><![CDATA[<p>最近在trace code 的時候會發現有的人會用static function.</p>

<p>冒出了一個疑問，為何要加上一個static ? 有什麼好處? 用在什麼時候適合?</p>

<p>所以做了一系列的 google ，在這邊做了一些整理</p>

<ol>
<li>unvisible <a href="http://stackoverflow.com/questions/5319361/static-function-in-c">StackOverflow</a>
做出一個對外使用的function，內部做translate unit
事實上，static function 的scope 是local 的。</li>
<li>save memory in class method <a href="http://stackoverflow.com/questions/4779950/is-static-method-faster-than-non-static">StackOverflow</a>
在這個討論串特別強調的是有無必要使用object
若是沒有的話就用static，可以節省memory</li>
</ol>


<p>Reference</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lvalue rvalue]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2012/11/28/lvalue-and-rvalue/"/>
    <updated>2012-11-28T16:49:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2012/11/28/lvalue-and-rvalue</id>
    <content type="html"><![CDATA[<p>今天面試的時候被問到什麼是lvalue 和 rvalue</p>

<p>當下完全不知道阿!!</p>

<hr />

<p>lvalue 是程式等號的左邊
rvalue 就是程式等號的右邊</p>

<p>右邊的永遠是值，左邊的永遠是變數。右邊的值要給左邊
也就是說右邊的是讀取位址<em>裡面的值</em>，讀取出來後塞入左邊的位址裡面</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tc rate limit]]></title>
    <link href="http://gavin09.github.io/Blog/blog/2012/11/18/tc-rate-limit/"/>
    <updated>2012-11-18T15:10:00+08:00</updated>
    <id>http://gavin09.github.io/Blog/blog/2012/11/18/tc-rate-limit</id>
    <content type="html"><![CDATA[<p>tc 可以限制網路卡的速度</p>

<p>tc qdisk add dev eth0 root tbf 400kbit latency 50ms burst 4096</p>

<p>限制速度400 kbit, latency 50ms, burst 4096</p>

<p>若不要使用則是</p>

<p>tc qdisk del dev eth0 root tbf 400kbit latency 50ms burst 4096</p>
]]></content>
  </entry>
  
</feed>
